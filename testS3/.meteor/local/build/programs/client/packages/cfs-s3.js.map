)]}'
{"version":3,"file":"/packages/cfs-s3.js","sources":["cfs-s3/s3.client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,U;AACA,e;AACA,wC;AACA,0B;AACA,iN;AACA,4E;AACA,uB;AACA,E;AACA,2E;AACA,qB;AACA,G;AACA,uC;AACA,kB;AACA,qC;AACA,yD;;AAEA,+C;AACA,0B;AACA,K;AACA,E;;AAEA,mD;AACA,2E;AACA,E","sourcesContent":["/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {undefined}\n *\n * Creates an S3 store instance on the client, which is just a shell object\n * storing some info.\n */\nFS.Store.S3 = function(name, options) {\n  var self = this;\n  if (!(self instanceof FS.Store.S3))\n    throw new Error('FS.Store.S3 missing keyword \"new\"');\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: 'storage.s3'\n  });\n};\n\nFS.Store.S3.prototype.fileKey = function(fileObj) {\n  return fileObj.collectionName + '/' + fileObj._id + '-' + fileObj.name();\n};\n"]}